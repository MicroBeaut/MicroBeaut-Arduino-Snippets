{
    //--------------------------------------------------
    //  New 
    //--------------------------------------------------
    "Arduino Setup...Loop...": {
        "prefix": "Arduino Setup Loop",
        "body": [
            "void setup() {",
            "\t$0",
            "}",
            "void loop() {",
            "\t",
            "}"
        ],
        "description": "Arduino Setup Loop"
    },
    //--------------------------------------------------
    //  Digiral I/O
    //  Function:   digitalRead()
    //--------------------------------------------------
    "Digital Read": {
        "prefix": "digital Read",
        "body": [
            "digitalRead(${1:pinNumber});"
        ],
        "description": "Reads the value from a specified digital pin"
    },
    //--------------------------------------------------
    //  Digiral I/O
    //  Function:   digitalWrite()
    //--------------------------------------------------
    "Digital Write": {
        "prefix": "digital Write",
        "body": [
            "digitalWrite(${1:pinNumber}, ${2:value});"
        ],
        "description": "Write a HIGH or a LOW value to a digital pin"
    },
    //--------------------------------------------------
    //  Digiral I/O
    //  Function:   pinMode()
    //--------------------------------------------------
    "Pin Mode": {
        "prefix": "pin Mode",
        "body": [
            "pinMode(${1:pinNumber}, ${2|INPUT,OUTPUT,INPUT_PULLUP|});"
        ],
        "description": "Configures the reference voltage used for digital input"
    },
    //--------------------------------------------------
    //  Analog I/O
    //  Function:   analogRead()
    //--------------------------------------------------
    "Analog Read": {
        "prefix": "analog Read",
        "body": [
            "analogRead(${1:analogPin});"
        ],
        "description": "Reads the value from the specified analog pin"
    },
    //--------------------------------------------------
    //  Analog I/O
    //  Function:   analogWrite()
    //--------------------------------------------------
    "Analog Write": {
        "prefix": "analog Write",
        "body": [
            "analogWrite(${1:analogPin}, ${2:value});"
        ],
        "description": "Writes an analog value (PWM wave) to a pin"
    },
    //--------------------------------------------------
    //  Analog I/O
    //  Function:   analogReference()
    //--------------------------------------------------
    "Analog Reference": {
        "prefix": "analog Reference",
        "body": [
            "analogReference(${1|DEFAULT,EXTERNAL,INTERNAL,INTERNAL1V1,INTERNAL2V56|});"
        ],
        "description": "Configures the reference voltage used for analog input"
    },
    //--------------------------------------------------
    //  Zero, Due & MKR Family
    //  Function:   analogReadResolution()
    //--------------------------------------------------
    "Analog Read Resolution": {
        "prefix": "analog Read Resolution",
        "body": [
            "analogReadResolution(${1|10,12,16,8|});"
        ],
        "description": "Sets the size (in bits) of the value returned by analogRead()"
    },
    //--------------------------------------------------
    //  Zero, Due & MKR Family
    //  Function:   analogWriteResolution()
    //--------------------------------------------------
    "Analog Write Resolution": {
        "prefix": "analog Write Resolution",
        "body": [
            "analogWriteResolution(${1|10,12,16,8|});"
        ],
        "description": "Sets the resolution of the analogWrite() function"
    },
    //--------------------------------------------------
    //  Advanced I/O
    //  Function:   noTone()
    //--------------------------------------------------
    "No Tone": {
        "prefix": "no Tone",
        "body": [
            "noTone(${1:pinNumber});"
        ],
        "description": "Stops the generation of a square wave triggered"
    },
    //--------------------------------------------------
    //  Advanced I/O
    //  Function:   pulseIn()
    //--------------------------------------------------
    "Pulse In": {
        "prefix": "pulse In",
        "body": [
            "pulseIn(${1:pinNumber}, ${2|HIGH,LOW|}${3:, ${4:timeout}});"
        ],
        "description": "Reads a pulse (either HIGH or LOW) on a pin"
    },
    //--------------------------------------------------
    //  Advanced I/O
    //  Function:   pulseInLong()
    //--------------------------------------------------
    "Pulse In Long": {
        "prefix": "pulse In Long",
        "body": [
            "pulseInLong(${1:pinNumber}, ${2|HIGH,LOW|}${3:, ${4:timeout}});"
        ],
        "description": "Reads a pulse (either HIGH or LOW) on a pin"
    },
    //--------------------------------------------------
    //  Advanced I/O
    //  Function:   shiftIn()
    //--------------------------------------------------
    "Shift In": {
        "prefix": "shift In",
        "body": [
            "shiftIn(${1:dataPin}, ${2:clockPin}, ${3|MSBFIRST,LSBFIRST|});"
        ],
        "description": "Shifts in a byte of data one bit at a time"
    },
    //--------------------------------------------------
    //  Advanced I/O
    //  Function:   shiftOut()
    //--------------------------------------------------
    "Shift Out": {
        "prefix": "shift Out",
        "body": [
            "shiftOut(${1:dataPin}, ${2:clockPin}, ${3|MSBFIRST,LSBFIRST|}, ${4:value});"
        ],
        "description": "Shifts in a byte of data one bit at a time"
    },
    //--------------------------------------------------
    //  Advanced I/O
    //  Function:   tonte()
    //--------------------------------------------------
    "Tone...": {
        "prefix": "tone",
        "body": [
            "shiftIn(${1:pinOu}, ${2:frequency}${3:, ${4:duration}});"
        ],
        "description": "Generates a square wave of the specified frequency (and 50% duty cycle) on a pin"
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  do...
    //--------------------------------------------------
    "While...": {
        "prefix": "while ",
        "body": [
            "while(${1:expression}) {",
            "\t// TODO: STATEMENTS \n\t$0",
            "}"
        ],
        "description": "Executes statement repeatedly until expression evaluates to zero"
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  do...while
    //--------------------------------------------------
    "Do...While": {
        "prefix": "do while",
        "body": [
            "do {",
            "\t// TODO: STATEMENTS \n\t$0",
            "while(${1:expression});"
        ],
        "description": "Executes a statement repeatedly until the specified termination condition (the expression) evaluates to zero"
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  for...
    //--------------------------------------------------
    "For...": {
        "prefix": "for ",
        "body": [
            "for (${1|int,char,double,float,long,short,size_t,unsigned char,unsigned int,unsigned long,word|} ${2:counter} = ${3:init} ; ${2:counter} ${4|<,<=,==,!=,>=,>|} ${5:value} ; ${6:${2:counter}++}) {",
            "\t// TODO: STATEMENTS \n\t$0",
            "}"
        ],
        "description": "Executes a statement repeatedly until the condition becomes fals"
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  break;
    //--------------------------------------------------
    "Break": {
        "prefix": "break",
        "body": [
            "break;$0"
        ],
        "description": "Break statement"
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  continue;
    //--------------------------------------------------
    "continue": {
        "prefix": "continue",
        "body": [
            "continue;$0"
        ],
        "description": "Continue statement"
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  goto ;
    //--------------------------------------------------
    "goto": {
        "prefix": "goto ",
        "body": [
            "goto ${1:identifier};$0"
        ],
        "description": "Goto statement"
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  return;
    //--------------------------------------------------
    "return": {
        "prefix": "return ",
        "body": [
            "return ${1:expression};$0"
        ],
        "description": "Return statement"
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  switch case...
    //--------------------------------------------------
    "Switch...": {
        "prefix": "switch case",
        "body": [
            "switch (${1:testexpression}) {",
            "\tcase ${2:expression}:",
            "\t\t// TODO: STATEMENTS",
            "\t\t$0${3:\n\tdefault:\n\t\t// TODO: DEFAULT STATEMENTS\n\t\t}",
            "}"
        ],
        "description": "Executes one of several groups of statements, depending on the value of an expression."
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  switch case...
    //--------------------------------------------------
    "case...": {
        "prefix": "case ",
        "body": [
            "case ${2:expression}:",
            "\t// TODO: STATEMENTS",
            "\t$0"
        ],
        "description": "Executes one of several groups of statements, depending on the value of an expression."
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  if...
    //--------------------------------------------------
    "If...": {
        "prefix": "if ",
        "body": [
            "if (${1:varName} ${2|==,!=,<,<=,>,>=|} ${3:value} ) {",
            "\t// TODO: STATEMENTS",
            "\t$0",
            "}"
        ],
        "description": "Conditionally executes a group of statements, depending on the value of an expression."
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  else if...
    //--------------------------------------------------
    "Else If...": {
        "prefix": "else if",
        "body": [
            "else if (${1:varName} ${2|==,!=,<,<=,>,>=|} ${3:value} ) {",
            "\t// TODO: STATEMENTS",
            "\t$0",
            "}"
        ],
        "description": "Conditionally executes a group of statements, depending on the value of an expression."
    },
    //--------------------------------------------------
    //  Iteration Statements
    //  Statement:  else...
    //--------------------------------------------------
    "Else...": {
        "prefix": "else ",
        "body": [
            "else {",
            "\t// TODO: STATEMENTS",
            "\t$0",
            "}"
        ],
        "description": "Conditionally executes a group of statements, depending on the value of an expression."
    }
}